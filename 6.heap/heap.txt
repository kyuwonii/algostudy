자료구조 ‘힙(heap)’
완전 이진 트리의 일종으로 우선순위 큐를 위하여 만들어진 자료구조
최댓값, 최솟값을 쉽게 추출할 수 있는 자료구조
힙은 일종의 반정렬 상태(느슨한 정렬 상태) 를 유지한다
힙은 일종의 반정렬 상태(느슨한 정렬 상태) 를 유지한다

최대 힙 : 제일 큰 노드가 루트에 있는 것!
최소 힙 : 제일 작은 노드가 루트에 있는 것.

구현 : 배열로 구현 (단, 편의를 위해 첫번째 인덱스 0은 사용 안함)

노드 번호 상관관계:
힙에서의 부모 노드와 자식 노드의 관계
왼쪽 자식의 인덱스 = (부모의 인덱스) * 2
오른쪽 자식의 인덱스 = (부모의 인덱스) * 2 + 1
부모의 인덱스 = (자식의 인덱스) / 2

c언어 힙 구현:
#define MAX_ELEMENT 200 // 힙 안에 저장된 요소의 개수

typedef struct{
  int key; //노드
} element;

typedef struct{
  element heap[MAX_ELEMENT]; //가장 큰 번호
  int heap_size; //힙 크기
} HeapType;

# 힙의 생성
HeapType heap1; //힙 생성


요소 삽입:
1. 힙에 새로운 요소가 들어오면, 일단 새로운 노드를 힙의 마지막 노드에 이어서 삽입한다.
2. 새로운 노드를 부모 노드들과 교환해서 힙의 성질을 만족시킨다
(맨 아래에 넣고 위랑 비교해서 적당한 위치까지 올리기!)

구현 :

void insert_max_heap(HeapType *h, element item){
  int i;
  i = ++(h->heap_size); // 힙 크기를 하나 증가

    while((i != 1) && (item.key > h->heap[i/2].key)){  // 자식이 크면 i번째 노드와 부모 노드를 교환환다.
    h->heap[i] = h->heap[i/2];  // 한 레벨 위로 올라단다. -> c++에서 바로 swap 활용 가능?
    i /= 2;
  }

  h->heap[i] = item; // 새로운 노드를 삽입
}


요소 삭제:
1. 최대 힙에서 최댓값은 루트 노드이므로 루트 노드가 삭제된다.
- 최대 힙(max heap)에서 삭제 연산은 최댓값을 가진 요소를 삭제하는 것이다. // 제일 큰것 부터 나가니까!
2. 삭제된 루트 노드에는 힙의 마지막 노드를 가져온다.
3. 힙을 재구성한다. //위에서부터 자기보다 크면 자리 주고, 내려옴 (비교)


구현 :

element delete_max_heap(HeapType *h){
  int parent, child;
  element item, temp;

  item = h->heap[1]; // 루트 노드 값을 반환하기 위해 item에 넣어놓기
  temp = h->heap[(h->heap_size)--]; // 마지막 노드를 temp에 나중에 맨 위에 넣으려고 옮기고 힙 크기를 하나 감소
  parent = 1;
  child = 2;

  while(child <= h->heap_size){ 
    
    // (자식고르기) 현재 노드의 자식 노드 중 더 큰 자식 노드를 찾는다. (자식 비교: 루트 노드의 왼쪽 자식 노드(index: 2)부터 비교 시작)
    if( (child < h->heap_size) && ((h->heap[child].key) < h->heap[child+1].key) ){
      child++;
    }

    // 더 큰 자식 노드보다 마지막 노드가 크면, while문 중지 (제일 클 경우)
    if( temp.key >= h->heap[child].key ){
      break; //맨 위에 있어야 할 애니까
    }

    // 더 큰 자식 노드보다 마지막 노드가 작으면, 부모 노드와 더 큰 자식 노드를 교환
    h->heap[parent] = h->heap[child];
    // 한 단계 아래로 이동
    parent = child;
    child *= 2;
  }

  // 마지막 노드를 재구성한 위치에 삽입
  h->heap[parent] = temp;
  
  // 최댓값(루트 노드 값)을 반환
  return item;
}
