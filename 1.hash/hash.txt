1주차 스터디: 해시 알고리즘

해시? 어떤 길이의 데이터를 입력해도 정해진 길이의 결과로 변형해서 보여주는 함수
메시지를 256bit의 함수로 바꿔준다. 사용가능한 범위는 2의 256승이기 때문에 많다.
데이터 무결성 증명을 위해서 많이 쓰인다. 해시 결과만 보고 외부인이 그 함수를 추측할 수 있는 경우는 거의 없다. (암호화와의 다른 점) 따라서 보안을 위해서 많이 씀. – 최근에는 블록체인

해시함수의 조건
계산 시간이 합리적… (변환시간이 너무 길면 안됨)
짧든 길든 무조건 256bit의 결과로 주어야 됨. (주로 큰 파일에 대해 무결성을 검증하기 위해 사용)
=> 그럼 이보다 더 짧고 적은 것에는 비효율적이겠군요!
어떤 길이의 데이터도 수용 가능해야 함.
결과값 중복, 입력 값 알 수 없음, 역행해서 알아내는 법은 불가능하다.
한 비트만 바뀌어도 전체 해시 값이 크게 바뀐다.

해시테이블 (현대: SHA2 함수군)
해시함수: 문자열을 받아서 숫자로 반환하는 함수
문자열에 대한 숫자를 mapping한다.
일관성 유지하고, 각 항목에 대해 꼭 다른 결과값을 가지는지 확인할 것.
빈 배열을 만들고, 여기에 모든 항목을 저장한다. 
장점: 추후에 a에 대한 값이 무엇인지 알고 싶을 때 해시함수만 통과하고 나면 그 리스트의 해시 함수 값 자리에 존재하는 것이 그 값이다.
Key(a)와 value(값)로 구성
대표적인 방법은 나눗셈 방법이다. 일반적으로 소수를 많이 잡는다 mod13, mod23 등등
H(x) = x mod m
충돌 해결:
배열을 작게 할 경우 충돌이 발생할 확률이 높기 때문에 각 배열 칸에 리스트의 형태로 존재하게 하는 방법도 있다. 단 이는 시간 복잡도 면에서 문제를 보임. (긴 리스트 발생시) – 체이닝
개방주소 방법 : 이미 자리를 차지 한 것이 있으면 정해진 규칙에 따라 다음 자리를 찾아준다.
암호성을 더하기 위해서 입력에 별도의 의미 없는 난수값 @을 붙여서 해싱 하기도 한다. (소금치기)

Map/unordered map을 활용해서 정의
헤더 파일
#include<map>
선언
map<T,T> 변수명
추가 및 삭제
변수명[key] = value : key를 인덱스로 value를 값으로 배열처럼 삽입가능
insert(make_pair(key,value)) : pair 형태로 추가
erase(key) : key값에 해당되는 원소 삭제
clear() : 전체삭제
조회
변수명[key] : key값에 해당하는 value를 반환(이 때 value가 여러 일 경우 맨 처음 값만 반환 만약 없다면 0반환)
find(key) : key값에 해당하는 iterator를 반환
count(key) : key값에 해당하는 value의 개수를 반환
iterator
begin() : 시작 iterator를 반환 (타입은 자료의 시작 값의 메모리 주소이다.)
end() : end iterator를 반환 (타입은 자료의 마지막 값 다음 메모리 주소이다. 이는 곧 비어 있음을 의미한다. )
기타
empty() : empty라면 true 아니면 false
size() : 크기의 수를 반환

+) c++ 에서 ::의 의미
범위지정 연산자.
첫번째 class를 선언하였을 경우
클래스 A안에 있는 각종 함수들과 변수들은 
A라는 클래스 안에 있으므로 
A의 범위를 가집니다. 그래서 보통 방법으로는 접근 불가
이때 메소드를 
Void name:: Print() = 네임 클래스의 print메소드를 밖에서 정의
이렇게 하면 클래스 메소드를 밖에서 정의할 수 있음.

namespace a
{
    void Print()
    {
    }
}

namespace b
{
    void Print();
    {
    }
}
이런식으로 사용하게 되는데

a::Print();라고 호출하면 영역 a에 잇는 Print()가 호출
b::Print();라고 호출하면 영역 b에 있는 Print()가 호출 됩니다

+) C++에서 정렬 사용하기 : sort 함수
https://twpower.github.io/71-use-sort-and-stable_sort-in-cpp

+) C++에서 substr함수 
문자열의 전 문자부터 뒤에 길이 만큼 문자열을 리턴한다.
